package game.base;

import java.io.BufferedReader;
import java.io.PrintWriter;

import command.ParseAndSendData;
import manager.ConnectionManager;
import manager.GameManager;
import player.BotPlayer;
import player.Player;

public class BotConnection implements Runnable {
	private GameManager gameManager;
	private BotPlayer botPlayer;
	ParseAndSendData parseAndSendData;
	ConnectionManager connectionManager;
	private int idPlayer;

	public BotConnection(ConnectionManager connectionManager, GameManager gameManager,
			ParseAndSendData parseAndSendData, int idPlayer) {
		this.connectionManager = connectionManager;
		this.gameManager = gameManager;
		this.parseAndSendData = parseAndSendData;
		this.setIdPlayer(idPlayer);
	}

	public void addPlayer(BufferedReader in, PrintWriter out, Player host) {
		connectionManager.sendDataToAll("started");
		gameManager.setGameStarted(true);

	}

	public GameManager getGameManager() {
		return gameManager;
	}

	public void setGameManager(GameManager gameManager) {
		this.gameManager = gameManager;
	}

	public BotPlayer getBotPlayer() {
		return botPlayer;
	}

	public void setBotPlayer(BotPlayer botPlayer) {
		this.botPlayer = botPlayer;
	}

	public int getIdPlayer() {
		return idPlayer;
	}

	public void setIdPlayer(int idPlayer) {
		this.idPlayer = idPlayer;
	}
	
	@Override
	public void run() {
		System.out.println("Bắt đầu chạy vòng lặp chính của trò chơi với bot ....");

		while (true) {
			try {
				if (gameManager.isGameStarted()) {
					if (!initializeGame) {
						gameManager.startGame();
						for (int i = 0; i < gameManager.getPlayerManager().getPlayers().size(); i++) {
							connectionManager.sendData(gameManager.getGameStart(i), connectionManager.getOutputs().get(i));
						}
						initializeGame = true;
					}
 
					int currentPlayer = gameManager.getTurnManager().getCurrentActivePlayer();
					System.out.println("Đang chờ dữ liệu từ người chơi: " + currentPlayer);

					String data = connectionManager.readData(currentPlayer);
					if (data != null && !data.isEmpty()) {
						System.out.println("Dữ liệu nhận được: " + data);
						parseAndSendData.parseData(data);
						gameManager.changeMove();
						for (int i = 0; i < gameManager.getPlayerManager().getPlayers().size(); i++) {
							connectionManager.sendData(gameManager.getGameStateAndPermission(i),
									connectionManager.getOutputs().get(i));
						}

					} else {
						System.out.println("Không nhận được dữ liệu từ người chơi: " + currentPlayer);
					}

					if (gameManager.checkWin()) {
						System.out.println("Trò chơi kết thúc!");
						connectionManager.sendDataToAll("end_game#");
						break;
					}
				}
				Thread.sleep(1000);
			} catch (Exception e) {
				System.err.println("Lỗi trong vòng lặp chính: " + e.getMessage());
				e.printStackTrace();
			}
		}
	}


}
