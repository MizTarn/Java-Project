package client;

import java.util.ArrayList;
import java.util.Objects;

import card.Card;
import javafx.application.Platform;

public class DurakMessage {
	private GameUpdateListener client;

	public DurakMessage(GameUpdateListener client) {
		this.client = client;

	}
	
	public void parseData(String data) {
		System.out.println("data trong mess la: " + data);
		String[] params = data.split("#");
		String command = params[0];
		switch (command) {
		case "waiting", "join_session_success":
			client.setWaitController(client.getUIManager().openWait());
			break;
		case "started":
			client.setGame2Controller(client.getUIManager().openGameGUI());
			break;
		case "started_base":
			client.setGameBaseController(client.getUIManager().openGameBase());
			break;
		case "join_session_failed":
			Platform.runLater(() -> client.getMenuController().showJoinFailedDialog());
			break;
		case "start_game":
			handleStartGame(params, "start_game");
			break;
		case "read_game":
			handleReadGame(params, "read_game");
			break;
		case "started_baccarat":
			client.setBaccaratGameController(client.getUIManager().openBaccaratGame());
			break;
		case "start_game_baccarat":
			handleStartBaccaratGame(params);
			break;
		case "start_game_base":
			handleStartGame(params, "start_game_base");
			break;
		default:
			System.err.println("Unknown command: " + command);
		}
	}

	public void handleStartGame(String[] params, String s) {
		String[] cards_hand = params[1].split(",");
		if (s.equals("start_game")) {
			client.setHandFromData(cards_hand, client.getGame2Controller());
		} else {
			client.setHandFromData(cards_hand, client.getGameBaseController());
		}
		String strTrumpCard = params[2];
		Card trumpCard = new Card(strTrumpCard);
		if (s.equals("start_game")) {
			client.getGame2Controller().setTrumpCardImage(trumpCard);
		} else {
			client.getGameBaseController().setTrumpCardImage(trumpCard);
		}
//		client.getGame2Controller().setTrumpCardImage(trumpCard);
		String turn = params[3];
		client.setTurn(Boolean.parseBoolean(turn));
		if (s.equals("start_game")) {
			client.getGame2Controller().setDisableActions(client.isTurn());
		} else {
			client.getGameBaseController().setDisableActions(client.isTurn());
		}
//		client.getGame2Controller().setDisableActions(client.isTurn());
		client.setIdPlayer(params[5]);
//		client.setPlayer(client.getGame2Controller());
	}

	public void handleStartBaccaratGame(String[] params) {
		System.out.println("params la : " + params);
		String[] cards_hand = params[1].split(",");
		client.setHandFromData(cards_hand, client.getBaccaratGameController());
////		String strTrumpCard = params[2];
////		Card trumpCard = new Card(strTrumpCard);
//		client.getGame2Controller().setTrumpCardImage(trumpCard);
		String turn = params[2];
		client.setTurn(Boolean.parseBoolean(turn));
		client.getBaccaratGameController().setDisableActions(client.isTurn());
		client.setIdPlayer(params[3]);
	}

	public void handleReadGame(String[] params, String s) {
		// Xử lý logic "read_game"
		// read_game#card1, card2, card3
		// ...#usedTrump#sizeDeck#endGame,nickname#hand#textAction#permission

		if (!Objects.equals(params[1], "null")) {
			String[] cards_table = params[1].split(",");
//			client.setTableFromData(cards_table, client.getGame2Controller());
			if (s.equals("read_game")) {
				client.setTableFromData(cards_table, client.getGame2Controller());
			} else {
				client.setTableFromData(cards_table, client.getGameBaseController());
			}
		} else {
			if (s.equals("read_game")) {
				client.getGame2Controller().setTable(new ArrayList<>());
			} else {
				client.getGameBaseController().setTable(new ArrayList<>());
			}
//			client.getGame2Controller().setTable(new ArrayList<>());
		}
		String bool = params[2];
		if (Boolean.parseBoolean(bool)) {
			if (s.equals("read_game")) {
				client.getGame2Controller().trumpCardUsed();
			} else {
				client.getGameBaseController().trumpCardUsed();
			}
//			client.getGame2Controller().trumpCardUsed();
		}
		if (s.equals("read_game")) {
			client.getGame2Controller().setSize(Integer.parseInt(params[3]));
		} else {
			client.getGameBaseController().setSize(Integer.parseInt(params[3]));
		}
//		client.getGame2Controller().setSize(Integer.parseInt(params[3]));
		String[] end = params[4].split(",");
		System.out.println("username cua client la " + client.getUsername());
		if (Boolean.parseBoolean(end[0])) {
			client.setEndController(client.getUIManager().openEnd());
			String name = end[1];
			if (Objects.equals(name, client.getUsername()) || Objects.equals(name, "you")) {
				String ending = "You Won";
				client.getEndController().setTextState(ending);
			} else {
				String ending = "You Lost";
				client.getEndController().setTextState(ending);
			}
		}
		if (!Objects.equals(params[5], "null")) {
			String[] cards_hand = params[5].split(",");
			if (s.equals("read_game")) {
				client.setHandFromData(cards_hand, client.getGame2Controller());
			} else {
				client.setHandFromData(cards_hand, client.getGameBaseController());
			}
//			client.setHandFromData(cards_hand, client.getGame2Controller());
		} else {
			if (s.equals("read_game")) {
				client.getGame2Controller().setCardsInHand(null);
			} else {
				client.getGameBaseController().setCardsInHand(null);
			}
//			client.getGame2Controller().setCardsInHand(null);
		}
		String textAction = params[6];
		if (Objects.equals(textAction, "null")) {
			if (s.equals("read_game")) {
				client.getGame2Controller().setTextAction("");
			} else {
				client.getGameBaseController().setTextAction("");
			}
//			client.getGame2Controller().setTextAction("");
		} else {
			if (s.equals("read_game")) {
				client.getGame2Controller().setTextAction(textAction);
			} else {
				client.getGameBaseController().setTextAction(textAction);
			}
//			client.getGame2Controller().setTextAction(textAction);
		}
		String turn = params[7];
		client.setTurn(Boolean.parseBoolean(turn));
		if (s.equals("read_game")) {
			client.getGame2Controller().setDisableActions(Boolean.parseBoolean(turn));
		} else {
			client.getGameBaseController().setDisableActions(Boolean.parseBoolean(turn));
		}
//		client.getGame2Controller().setDisableActions(Boolean.parseBoolean(turn));
	}
}
