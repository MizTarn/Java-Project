package com.example.durak_game;

import java.util.ArrayList;
import java.util.Stack;

public class Table {
	private ArrayList<Card> table;
	private Card trumpCard;
	private Stack<Card> defendingCards;
	private Stack<Card> attackingCards;
	private Deck deck;
	private boolean changeMove;
	
	public Table() {
		this.table = new ArrayList<Card>();
//		this.trumpCard = new Card(null, null);
		this.deck = new Deck();
		this.setChangeMove(false);
		defendingCards = new Stack<Card>();
		attackingCards = new Stack<Card>();
	}
	
	public Table(ArrayList<Card> table, Card trumpCard, Deck deck) {
		this.table = table;
		this.trumpCard = trumpCard;
		this.deck = deck;
	}
	
	public Table(Card trumpCard) {
		this.table = new ArrayList<Card>();
		this.trumpCard = trumpCard;
		this.deck = new Deck();
	}
	
	public ArrayList<Card> getTable() {
		return table;
	}
	
	public void newTable() {
		table = new ArrayList<Card>();
	}
	
	public int getSize() {
		return this.getTable().size();
	}
	
	public Card getTrumpCard(){
		return this.trumpCard;
	}
	
	public void setTrumpCard(Card card) {
		this.trumpCard = card;
	}
	
	
	public Stack<Card> getDefendingCards() {
		return defendingCards;
	}

	public void setDefendingCards(Stack<Card> defendingCards) {
		this.defendingCards = defendingCards;
	}

	public Stack<Card> getAttackingCards() {
		return attackingCards;
	}

	public void setAttackingCards(Stack<Card> attackingCards) {
		this.attackingCards = attackingCards;
	}

	public void addAttackingCard(Card card) {
			attackingCards.add(card);
	}
	
	public void addDefendingCards(Card card) {
			defendingCards.add(card);
			System.out.println("da them vao addDefendingcard");
	}

	public Deck getDeck() {
		return deck;
	}

	public void setDeck(Deck deck) {
		this.deck = deck;
	}

	public boolean isEmpty() {
		if(table.isEmpty()) {
			return true;
		}
		return false;
	}

	public void clearTable() {
		table.clear();
		
	}
	
	public void addCardToTable(Card card, int currentPlayer, ArrayList<Player2> players) {
        // Logic thêm bài vào bàn.
        table.add(card);
    }
	
	public void drawCardsForPlayers(ArrayList<Player2> players) throws Exception {
        for (Player2 player : players) {
            while (player.getHand().getCardsInHand().size() < 6 && !deck.isEmpty()) {
                player.getHand().getCardsInHand().add(deck.drawCard());
            }
        }
    }
	
	public boolean canPutInTable(Card pcard, boolean isAttacker) {
	    if (table.isEmpty()) {
	        return true;
	    }

	    if (isAttacker) {
	        return table.stream().anyMatch(card -> pcard.getValue().getRank() == card.getValue().getRank());
	    }

	    Card defendingCard = this.getDefendingCards().peek();
	    boolean isTrump = defendingCard.getSuit().equals(this.getTrumpCard().getSuit());

	    if (pcard.getSuit().equals(defendingCard.getSuit()) && pcard.getValue().getRank() >= defendingCard.getValue().getRank()) {
	        this.getDefendingCards().pop();
	        return true;
	    }

	    if (!isTrump && pcard.getSuit().equals(this.getTrumpCard().getSuit())) {
	        this.getDefendingCards().pop();
	        return true;
	    }

	    return false;
	}


	public boolean isChangeMove() {
		return changeMove;
	}

	public void setChangeMove(boolean changeMove) {
		this.changeMove = changeMove;
	}
}
