package manager;

import java.util.stream.Collectors;

import card.Deck;
import player.Player;

public class BaccaratManager implements IGameManager{
	private Table tableManager;
	private PlayerManager playerManager;
	private TurnManager turnManager;
	private boolean gameStarted;
	
	public BaccaratManager() {
		tableManager = new Table();
		playerManager = new PlayerManager();
		turnManager = new TurnManager(playerManager);
		gameStarted = false;
	}
	@Override
	public boolean isGameStarted() {
		// TODO Auto-generated method stub
		return this.gameStarted;
	}

	@Override
	public void setGameStarted(boolean gameStarted) {
		this.gameStarted = gameStarted;
		
	}

	@Override
	public PlayerManager getPlayerManager() {
		return this.playerManager;
	}

	@Override
	public void setPlayerManager(PlayerManager playerManager) {
		 this.playerManager = playerManager;
		
	}

	@Override
	public int numberPlayers() {
		// TODO Auto-generated method stub
		return this.playerManager.getPlayers().size();
	}

	@Override
	public boolean checkWin() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public TurnManager getTurnManager() {
		// TODO Auto-generated method stub
		return this.turnManager;
	}

	@Override
	public void setTurnManager(TurnManager turnManager) {
		this.turnManager = turnManager;
		
	}

	@Override
	public void startGame() {
		tableManager.setDeck(new Deck());
		tableManager.getDeck().shuffle();
		tableManager.newTable();
		try {
			for (int i = 0; i < 3; i++) {
				for (Player p : playerManager.getPlayers()) {
					System.out.println("player: " + p);
					p.getHand().addCard(tableManager.getDeck().drawCard());
				}
			}
			turnManager.setCurrentActivePlayer(this.whoMakeFirstMove());
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		
	}

	@Override
	public int whoMakeFirstMove() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void changeMove() {
		if (tableManager.isChangeMove()) {
			turnManager.nextPlayer();
		}
		
	}

	@Override
	public String getPlayerCard(int indexPlayer) {
		if (this.playerManager.getPlayers().get(indexPlayer).getHand().getCardsInHand().isEmpty()) {
			return "null";
		}
		return this.playerManager.getPlayers().get(indexPlayer).getHand().getCardsInHand().stream().map(Object::toString)
				.collect(Collectors.joining(","));
	}

	@Override
	public String getEndGame() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getGameStateAndPermission(int i) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getGameStart(int i) {
		// TODO Auto-generated method stub
		return null;
	}

}
