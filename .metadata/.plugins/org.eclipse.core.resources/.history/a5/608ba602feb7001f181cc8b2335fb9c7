package card;

import java.io.Serializable;
import java.util.Random;

import card.Card.Suit;
import card.Card.Value;

public class Deck implements Serializable {
	private Card[] cards = new Card[52];
	private int sizeOfDeck;

	public Deck() {
		reset(); 
	} 

	public void reset() {
		sizeOfDeck = 0;
		for (Suit s : Suit.values()) {
			for (Value v : Value.values()) {
				cards[sizeOfDeck++] = new Card(s, v);
			}
		}
		System.out.println("sizeOfDeck is: " + sizeOfDeck);
	}

	public boolean isEmpty() {
		return sizeOfDeck == 0;
	}

	public void shuffle() {
		int n = sizeOfDeck;
		Random r = new Random();

		for (int i = 0; i < sizeOfDeck; i++) {
			int randint = i + r.nextInt(n - i);
			Card randCard = cards[randint];
			cards[randint] = cards[i];
			cards[i] = randCard;
		}
	}

	public Card drawCard() throws Exception {
		if (isEmpty()) {
			throw new Exception("Loi");
		}
		return cards[--sizeOfDeck];
	}

	public int getSizeOfDeck() {
		return sizeOfDeck;
	}
}
