package game.base;

import javafx.application.Platform;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.paint.ImagePattern;
import view.EndController;
import view.Game2Controller;
import view.MenuController;
import view.WaitController;

import java.io.*;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

import card.Card;
import card.Hand;


public class Client {
    private NetworkManager networkManager;
    private UIManager uiManager;
    private MessageHandler messageHandler;
    private WaitController wc;
    private Game2Controller gc;
    private EndController ec;
   	private String username;
    private MenuController mc;
    private boolean isTurn;
    private String idPlayer;
    
    public Client() {
        try {
            networkManager = new NetworkManager("localhost", 12345);
            uiManager = new UIManager();
            messageHandler = new MessageHandler(this);
            new Thread(this::receive, "Client Receive Thread").start();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void receive() {
        while (true) {
            try {
                String data = networkManager.readData();
                if (data == null) break;
                Platform.runLater(() -> messageHandler.parseData(data));
            } catch (IOException e) {
                System.err.println("Error in receive thread: " + e.getMessage());
                break;
            }
        }
    }

    public void sendData(String data) {
        networkManager.sendData(data);
    }

    public NetworkManager getNetworkManager() {
		return networkManager;
	}

	public void setNetworkManager(NetworkManager networkManager) {
		this.networkManager = networkManager;
	}

	public UIManager getUiManager() {
		return uiManager;
	}

	public void setUiManager(UIManager uiManager) {
		this.uiManager = uiManager;
	}

	public MessageHandler getMessageHandler() {
		return messageHandler;
	}

	public void setMessageHandler(MessageHandler messageHandler) {
		this.messageHandler = messageHandler;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}


	public boolean isTurn() {
		return isTurn;
	}

	public void setTurn(boolean isTurn) {
		this.isTurn = isTurn;
	}

	public UIManager getUIManager() {
        return uiManager;
    }
	
	public Game2Controller getGame2Controller() {
		return gc;
	}

	public void setGame2Controller(Game2Controller gc) {
		this.gc = gc;
	}


    public void close() {
        try {
            networkManager.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public void createSession(String name, String s_id) throws NumberFormatException {
    	if(name == null) {
    		Platform.runLater(() -> mc.showJoinFailedDialog());
    	}
    	else {
    		this.username = name;
            String data = "create_session" + "#" + name + "#" + s_id;
            sendData(data);
            System.out.println(s_id);
    	}
    }

    public void joinSession(String username, String session_id) throws ClassCastException {
    	if(username == null || session_id == null) {
//    		Platform.runLater(() -> mc.showJoinFailedDialog());
    	}
    	else {
    		this.username = username;
            String data = "join_session#" + this.username + "#" + session_id;
            sendData(data);
            System.out.println(data);
    	}
        
    }
    
//    public void setGameController(Game2Controller tc){
//        this.gc = tc;
//    }

//    public void setWaitController(WaitController wc){
//        this.wc = wc;
//    }

    public void setMenuController(MenuController mc) {
        this.mc = mc;
    }

    public MenuController getMenuController() {
        return mc;
    }
//    public void setEndController(EndController ec) {
//        this.ec = ec;
//    }

	public String getIdPlayer() {
		return idPlayer;
	}

	public void setIdPlayer(String idPlayer) {
		this.idPlayer = idPlayer;
	}
	
	
	public void setHandFromData(String[] data) {
        ArrayList<Card> cards = new ArrayList<>();
        for(String str: data) {
            cards.add(new Card(str));
        }
        gc.setCardsInHand(new Hand(cards));
    }

	public void setTableFromData(String[] data) {
        for(int i = 0; i < data.length; i++) {
            data[i] = data[i].strip();
        }
        ArrayList<Card> cards = new ArrayList<>();
        for(String str: data) {
            cards.add(new Card(str));
        }
//        table = cards;
        gc.setTable(cards);
    }
	
	 public void sendGameMove(String operation, Card card) {
	        String data = operation;
	        if(card != null) {
	            data += "#" + card.toString() + "#" + idPlayer;
	        }
	        else {
	        	data += "#null" + "#" + idPlayer;
	        }
	        sendData(data);
	    }

	public EndController getEndController() {
		return ec;
	}

	public void setEndController(EndController ec) {
		this.ec = ec;
	}

	public WaitController getWaitController() {
		return wc;
	}

	public void setWaitController(WaitController wc) {
		this.wc = wc;
	}
}

